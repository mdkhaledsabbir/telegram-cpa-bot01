import os
import json
import threading

import telebot
from telebot import types

from flask import Flask

import firebase_admin
from firebase_admin import credentials
from firebase_admin import db

# Environment variables ‡¶•‡ßá‡¶ï‡ßá token ‡¶ì admin id ‡¶®‡¶ø‡¶®
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# Firebase credentials ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
cred_data = json.loads(os.getenv("FIREBASE_CREDENTIALS"))
cred = credentials.Certificate(cred_data)

firebase_admin.initialize_app(cred, {
    'databaseURL': os.getenv("FIREBASE_DB_URL")
})

bot = telebot.TeleBot(BOT_TOKEN)

new_tasks = {
    "1": "‚úÖ Pin submit: https://tinyurl.com/37xxp2an",
    "2": "‚úÖ Pin submit: https://tinyurl.com/4vc76fw5",
    "3": "‚úÖ Sign-up: https://tinyurl.com/yyherfxt",
    "4": "‚úÖ Sign-up: https://tinyurl.com/25nt96v9",
    "5": "‚úÖ Any: https://trianglerockers.com/1830624",
    "6": "‚úÖ Any: https://trianglerockers.com/1830624",
    "7": "‚úÖ Any: https://trianglerockers.com/1830624",
    "8": "‚úÖ Any: https://trianglerockers.com/1830624",
    "9": "‚úÖ Pin or Sign-up: https://short-link.me/19jeX",
    "10": "‚úÖ Pin or Sign-up: https://short-link.me/19jfx",
    "11": "‚úÖ Pin or Sign-up: https://short-link.me/19jfZ",
    "12": "‚úÖ Pin or Sign-up: https://short-link.me/19jfx",
    "13": "‚úÖ Pin or Sign-up: https://short-link.me/19jgz",
    "14": "‚úÖ Pin or Sign-up: https://short-link.me/19jeX",
    "15": "‚úÖ Pin or Sign-up: https://short-link.me/19jfx",
    "16": "‚úÖ Pin or Sign-up: https://short-link.me/19jeX",
    "17": "‚úÖ Pin or Sign-up: https://short-link.me/19jfx",
    "18": "‚úÖ Pin or Sign-up: https://short-link.me/19jgz",
    "19": "‚úÖ Pin or Sign-up: https://short-link.me/19jfx",
    "20": "‚úÖ Pin or Sign-up: https://short-link.me/19jeX"
}

MIN_WITHDRAW_AMOUNT = 600

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø dict
user_screenshot_state = {}

def main_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üéØ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®",
        "üì∑ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü",
        "üí∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏",
        "üë´ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®",
        "‚ÑπÔ∏è ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ",
        "üì§ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®"
    ]
    if user_id == ADMIN_ID:
        buttons.append("üßë‚Äçüíº ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®")
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start'])
def start(msg):
    user_id = str(msg.chat.id)
    ref_id = None
    try:
        ref_id = str(msg.text.split()[1])
    except IndexError:
        ref_id = None

    user_ref = db.reference(f'users/{user_id}')

    if not user_ref.get():
        user_ref.set({
            'balance': 0,
            'referrals': 0,
            'screenshots': [],
            'submitted': False,
            'submitted_task': "",
            'withdraw': []
        })

        if ref_id and ref_id != user_id:
            ref_ref = db.reference(f'users/{ref_id}')
            if ref_ref.get():
                current_referrals = ref_ref.child('referrals').get() or 0
                ref_ref.child('referrals').set(current_referrals + 1)

                current_balance = ref_ref.child('balance').get() or 0
                ref_bonus = 10
                ref_ref.child('balance').set(current_balance + ref_bonus)

                bot.send_message(int(ref_id), f'üéâ ‡¶è‡¶ï‡¶ú‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá! ‡¶Ü‡¶™‡¶®‡¶ø {ref_bonus} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§')

    bot.send_message(msg.chat.id, "üéâ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§", reply_markup=main_menu(msg.chat.id))

@bot.message_handler(func=lambda msg: msg.text == "üéØ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®")
def task(msg):
    task_text = "üí∏ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá ‡ß©‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡•§\n\n"
    task_text += "üì¢ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n"
    for k, v in new_tasks.items():
        task_text += f"{k}. {v}\n\n"
    bot.send_message(msg.chat.id, task_text)

# ================================
# ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ
# ================================

@bot.message_handler(func=lambda msg: msg.text == "üì∑ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü")
def request_screenshots(msg):
    user_id = str(msg.chat.id)
    user_data = db.reference(f'users/{user_id}').get() or {}
    existing_screenshots = user_data.get('screenshots', [])
    
    if existing_screenshots and len(existing_screenshots) >= 3:
        bot.send_message(msg.chat.id, "‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡ßã‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡ß©‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶ú‡¶Æ‡¶æ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ì ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
    user_screenshot_state[user_id] = {
        'task': None,
        'screenshots': []
    }
    
    # ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶ï‡¶∞‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for k, v in new_tasks.items():
        markup.add(types.KeyboardButton(f"{k}. {v}"))
    bot.send_message(msg.chat.id, "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶®:", reply_markup=markup)

@bot.message_handler(func=lambda msg: str(msg.chat.id) in user_screenshot_state and user_screenshot_state[str(msg.chat.id)]['task'] is None)
def task_selected(msg):
    user_id = str(msg.chat.id)
    text = msg.text.strip()
    task_id = text.split('.')[0]  # "‡ßß. ..." ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡ßß ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá
    
    if task_id not in new_tasks:
        bot.send_message(msg.chat.id, "‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ü‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    user_screenshot_state[user_id]['task'] = task_id
    bot.send_message(msg.chat.id, f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®: {new_tasks[task_id]}\n\n‡¶è‡¶ñ‡¶® ‡ß©‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶è‡¶ï‡ßá ‡¶è‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

@bot.message_handler(content_types=['photo'])
def handle_photo(msg):
    user_id = str(msg.chat.id)

    # ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
    if user_id not in user_screenshot_state or user_screenshot_state[user_id]['task'] is None:
        # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
        existing = db.reference(f'users/{user_id}/screenshots').get() or []
        if len(existing) >= 3:
            bot.send_message(msg.chat.id, "‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡ßã‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡ß©‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return
        else:
            bot.send_message(msg.chat.id, "‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá 'üì∑ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return

    # ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Ü‡¶õ‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    current_screenshots = user_screenshot_state[user_id]['screenshots']
    current_screenshots.append(msg.photo[-1].file_id)
    user_screenshot_state[user_id]['screenshots'] = current_screenshots
    bot.send_message(msg.chat.id, f"üì∏ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü {len(current_screenshots)} ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    if len(current_screenshots) == 3:
        # ‡ß©‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶≤‡ßá Firebase ‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        user_ref = db.reference(f'users/{user_id}')
        user_ref.update({
            'screenshots': current_screenshots,
            'submitted_task': user_screenshot_state[user_id]['task'],
            'submitted': True
        })

        # ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶ì ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶π ‡¶™‡¶æ‡¶†‡¶æ‡¶®
        media_group = [types.InputMediaPhoto(fid) for fid in current_screenshots]
        bot.send_media_group(ADMIN_ID, media_group)
        task_name = new_tasks[user_screenshot_state[user_id]['task']]
        bot.send_message(ADMIN_ID, f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {user_id}\n‡¶ü‡¶æ‡¶∏‡ßç‡¶ï: {task_name}\n\n‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=approve_reject_markup(user_id))

        bot.send_message(msg.chat.id, "‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶π‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§")

        # ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        del user_screenshot_state[user_id]

def approve_reject_markup(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ Approve", callback_data=f"approve_ss:{user_id}"),
        types.InlineKeyboardButton("‚ùå Reject", callback_data=f"reject_ss:{user_id}")
    )
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_ss") or call.data.startswith("reject_ss"))
def handle_ss_approval(call):
    action, user_id = call.data.split(":")
    user_ref = db.reference(f'users/{user_id}')
    user_data = user_ref.get() or {}
    balance = user_data.get('balance', 0)

    if action == "approve_ss":
        user_ref.child('balance').set(balance + 30)
        user_ref.child('screenshots').set([])
        user_ref.child('submitted').set(False)
        user_ref.child('submitted_task').set("")
        bot.send_message(int(user_id), "üéâ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶è‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡ß©‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        bot.edit_message_text("‚úÖ Approve ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", call.message.chat.id, call.message.message_id)
    else:
        bot.send_message(int(user_id), "‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶π‡ßü‡¶®‡¶ø‡•§ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        user_ref.child('screenshots').set([])
        user_ref.child('submitted').set(False)
        user_ref.child('submitted_task').set("")
        bot.edit_message_text("‚ùå Reject ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", call.message.chat.id, call.message.message_id)

# ================================
# ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∂‡ßá‡¶∑
# ================================

@bot.message_handler(func=lambda msg: msg.text == "üí∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏")
def balance(msg):
    user_id = str(msg.chat.id)
    data = db.reference(f'users/{user_id}').get() or {}
    bal = data.get('balance', 0)
    refs = data.get('referrals', 0)
    bot.send_message(msg.chat.id, f"üí∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {bal} ‡¶ü‡¶æ‡¶ï‡¶æ\nüë• ‡¶∞‡ßá‡¶´‡¶æ‡¶∞: {refs} ‡¶ú‡¶®")

@bot.message_handler(func=lambda msg: msg.text == "üë´ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
def refer(msg):
    link = f"https://t.me/myoffer363bot?start={msg.chat.id}"
    bot.send_message(msg.chat.id, f"üì¢ ‡¶è‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶á‡¶®‡¶≠‡¶æ‡¶á‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:\n{link}\n\nüí∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ßß‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶∞‡¶ø‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§")

@bot.message_handler(func=lambda msg: msg.text == "üì§ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
def withdraw(msg):
    user_id = str(msg.chat.id)
    data = db.reference(f'users/{user_id}').get() or {}
    balance = data.get("balance", 0)

    if balance < MIN_WITHDRAW_AMOUNT:
        bot.send_message(msg.chat.id, f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶®‡ßü‡•§ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá {MIN_WITHDRAW_AMOUNT} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá‡•§",
                         reply_markup=main_menu(msg.chat.id))
        return

    bot.send_message(msg.chat.id, "üí≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ bKash/Nagad/Rocket ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶§‡ßÅ‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®:",
                     reply_markup=main_menu(msg.chat.id))
    bot.register_next_step_handler(msg, process_withdraw_number)

def process_withdraw_number(msg):
    number = msg.text.strip()
    user_id = str(msg.chat.id)
    withdraw_ref = db.reference(f'users/{user_id}/withdraw')

    withdraw_ref.push({
        'number': number,
        'status': 'pending'
    })

    bot.send_message(msg.chat.id, "‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§")
    bot.send_message(ADMIN_ID, f"üì• ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü:\nüë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {user_id}\nüì± ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {number}", reply_markup=withdraw_admin_markup(user_id, number))

def withdraw_admin_markup(user_id, number):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ Approve", callback_data=f"approve_withdraw:{user_id}:{number}"),
        types.InlineKeyboardButton("‚ùå Reject", callback_data=f"reject_withdraw:{user_id}:{number}")
    )
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_withdraw") or call.data.startswith("reject_withdraw"))
def handle_withdraw_callback(call):
    action, user_id, number = call.data.split(":")
    user_ref = db.reference(f'users/{user_id}')
    user_data = user_ref.get() or {}
    balance = user_data.get('balance', 0)

    if action == "approve_withdraw":
        if balance >= MIN_WITHDRAW_AMOUNT:
            user_ref.child('balance').set(balance - MIN_WITHDRAW_AMOUNT)
            bot.send_message(int(user_id), f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá: {number}")
            bot.edit_message_text("‚úÖ Approve ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶Æ ‡¶Ü‡¶õ‡ßá!")
    else:
        bot.send_message(int(user_id), "‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        bot.edit_message_text("‚ùå Reject ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", call.message.chat.id, call.message.message_id)

@bot.message_handler(func=lambda msg: msg.text == "‚ÑπÔ∏è ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ")
def rules(msg):
    bot.send_message(msg.chat.id, (
        "üìå ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡ßÇ‡¶≤‡¶§ Email, Pin, Sign-Up ‡¶è‡¶á ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßá ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§\n"
        "‚úÖ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá ‡ß©‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§\n"
        "üîç ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶¶‡ßá‡¶ñ‡ßá ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶¨‡ßá‡•§\n"
        "üö´ ‡¶≠‡ßÅ‡¶≤ ‡¶¨‡¶æ ‡¶´‡ßá‡¶ï ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶¶‡¶ø‡¶≤‡ßá ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶π‡¶¨‡ßá‡•§\n"
        "‚úÖ ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßá ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ì ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶§‡¶æ‡¶∞‡¶æ‡¶á ‡ßß‡ß¶‡ß¶% ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶ù‡¶æ‡¶Æ‡ßá‡¶≤‡¶æ ‡¶õ‡¶æ‡ßú‡¶æ‡¶á‡•§\n"
        "‚è±Ô∏è ‡ßß‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶Æ‡¶æ‡¶Æ ‡ßß‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶¨‡¶ø‡¶∞‡¶§‡¶ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§"
    ))
# ================================
# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá)
# ================================

@bot.message_handler(func=lambda msg: msg.text == "üßë‚Äçüíº ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®" and msg.chat.id == ADMIN_ID)
def admin_panel(msg):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üëÄ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", callback_data="admin_view_users"),
        types.InlineKeyboardButton("‚úèÔ∏è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶°‡¶ø‡¶ü", callback_data="admin_edit_user")
    )
    bot.send_message(msg.chat.id, "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=markup)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø callback
@bot.callback_query_handler(func=lambda call: call.data == "admin_view_users" and call.from_user.id == ADMIN_ID)
def admin_view_users(call):
    all_users = db.reference('users').get() or {}
    if not all_users:
        bot.answer_callback_query(call.id, "‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return
    msg_text = "üìã ‡¶∏‡¶ï‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø:\n\n"
    for uid, data in all_users.items():
        bal = data.get('balance', 0)
        refs = data.get('referrals', 0)
        submitted_task = data.get('submitted_task', 'None')
        submitted = data.get('submitted', False)
        msg_text += (
            f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: {uid}\n"
            f"üí∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {bal} ‡¶ü‡¶æ‡¶ï‡¶æ\n"
            f"üë• ‡¶∞‡ßá‡¶´‡¶æ‡¶∞: {refs} ‡¶ú‡¶®\n"
            f"üìù ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï: {submitted_task}\n"
            f"üì∏ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {'‡¶π‡ßç‡¶Ø‡¶æ‡¶Å' if submitted else '‡¶®‡¶æ'}\n\n"
        )
    # ‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßú ‡¶π‡ßü, ‡¶ü‡ßÅ‡¶ï‡¶∞‡ßá‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã
    bot.send_message(call.message.chat.id, msg_text)
    bot.answer_callback_query(call.id)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶°‡¶ø‡¶ü ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø callback (‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶¨‡¶æ‡¶á ‡¶∏‡ßç‡¶ü‡ßá‡¶™)
admin_edit_state = {}

@bot.callback_query_handler(func=lambda call: call.data == "admin_edit_user" and call.from_user.id == ADMIN_ID)
def admin_edit_user_start(call):
    bot.send_message(call.message.chat.id, "üî¢ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®:")
    admin_edit_state[call.message.chat.id] = {'step': 'awaiting_user_id'}
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda msg: msg.chat.id in admin_edit_state and admin_edit_state[msg.chat.id]['step'] == 'awaiting_user_id')
def admin_receive_user_id(msg):
    user_id = msg.text.strip()
    user_ref = db.reference(f'users/{user_id}')
    if not user_ref.get():
        bot.send_message(msg.chat.id, "‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return
    admin_edit_state[msg.chat.id]['user_id'] = user_id
    admin_edit_state[msg.chat.id]['step'] = 'awaiting_new_balance'
    bot.send_message(msg.chat.id, f"‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: {user_id}\n\n‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ (‡¶ü‡¶æ‡¶ï‡¶æ‡ßü) ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")

@bot.message_handler(func=lambda msg: msg.chat.id in admin_edit_state and admin_edit_state[msg.chat.id]['step'] == 'awaiting_new_balance')
def admin_receive_new_balance(msg):
    try:
        new_balance = int(msg.text.strip())
        if new_balance < 0:
            raise ValueError
    except ValueError:
        bot.send_message(msg.chat.id, "‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶ß‡¶®‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
        return

    user_id = admin_edit_state[msg.chat.id]['user_id']
    user_ref = db.reference(f'users/{user_id}')
    user_ref.child('balance').set(new_balance)
    bot.send_message(msg.chat.id, f"‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ {user_id} ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá: {new_balance} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§")
    del admin_edit_state[msg.chat.id]

# ================================
# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∂‡ßá‡¶∑
# ================================


# Flask app ‡¶è‡¶¨‡¶Ç polling (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)

app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Bot is alive and running."

def run_http():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# Flask ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
threading.Thread(target=run_http).start()

bot.infinity_polling()
