import os
import json
import threading

import telebot
from telebot import types

from flask import Flask

import firebase_admin
from firebase_admin import credentials
from firebase_admin import db

# Environment variables ржерзЗржХрзЗ token ржУ admin id ржирж┐ржи
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# Firebase credentials рж▓рзЛржб ржХрж░рзБржи
cred_data = json.loads(os.getenv("FIREBASE_CREDENTIALS"))
cred = credentials.Certificate(cred_data)

firebase_admin.initialize_app(cred, {
    'databaseURL': os.getenv("FIREBASE_DB_URL")
})

bot = telebot.TeleBot(BOT_TOKEN)

new_tasks = {
    "1": "тЬЕ Pin submit: https://tinyurl.com/37xxp2an",
    "2": "тЬЕ Pin submit: https://tinyurl.com/4vc76fw5",
    "3": "тЬЕ Sign-up: https://tinyurl.com/yyherfxt",
    "4": "тЬЕ Sign-up: https://tinyurl.com/25nt96v9",
    "5": "тЬЕ Any: https://trianglerockers.com/1830624",
    "6": "тЬЕ Any: https://trianglerockers.com/1830624",
    "7": "тЬЕ Any: https://trianglerockers.com/1830624",
    "8": "тЬЕ Any: https://trianglerockers.com/1830624",
    "9": "тЬЕ Pin or Sign-up: https://short-link.me/19jeX",
    "10": "тЬЕ Pin or Sign-up: https://short-link.me/19jfx",
    "11": "тЬЕ Pin or Sign-up: https://short-link.me/19jfZ",
    "12": "тЬЕ Pin or Sign-up: https://short-link.me/19jfx",
    "13": "тЬЕ Pin or Sign-up: https://short-link.me/19jgz",
    "14": "тЬЕ Pin or Sign-up: https://short-link.me/19jeX",
    "15": "тЬЕ Pin or Sign-up: https://short-link.me/19jfx",
    "16": "тЬЕ Pin or Sign-up: https://short-link.me/19jeX",
    "17": "тЬЕ Pin or Sign-up: https://short-link.me/19jfx",
    "18": "тЬЕ Pin or Sign-up: https://short-link.me/19jgz",
    "19": "тЬЕ Pin or Sign-up: https://short-link.me/19jfx",
    "20": "тЬЕ Pin or Sign-up: https://short-link.me/19jeX"
}

MIN_WITHDRAW_AMOUNT = 600

def main_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "ЁЯОп ржЯрж╛рж╕рзНржХ ржХрж░рзБржи",
        "ЁЯУ╖ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕рж╛ржмржорж┐ржЯ",
        "ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕",
        "ЁЯСл рж░рзЗржлрж╛рж░ ржХрж░рзБржи",
        "тД╣я╕П ржирж┐рзЯржорж╛ржмрж▓рзА",
        "ЁЯУд ржЙржЗржержбрзНрж░ ржХрж░рзБржи"
    ]
    if user_id == ADMIN_ID:
        buttons.append("ЁЯзСтАНЁЯТ╝ ржЕрзНржпрж╛ржбржорж┐ржи")
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start'])
def start(msg):
    user_id = str(msg.chat.id)
    ref_id = None
    try:
        ref_id = str(msg.text.split()[1])
    except IndexError:
        ref_id = None

    user_ref = db.reference(f'users/{user_id}')

    if not user_ref.get():
        user_ref.set({
            'balance': 0,
            'referrals': 0,
            'screenshots': [],
            'submitted': False,
            'withdraw': []
        })

        if ref_id and ref_id != user_id:
            ref_ref = db.reference(f'users/{ref_id}')
            if ref_ref.get():
                current_referrals = ref_ref.child('referrals').get() or 0
                ref_ref.child('referrals').set(current_referrals + 1)

                current_balance = ref_ref.child('balance').get() or 0
                ref_bonus = 10
                ref_ref.child('balance').set(current_balance + ref_bonus)

                bot.send_message(int(ref_id), f'ЁЯОЙ ржПржХржЬржи ржирждрзБржи рж░рзЗржлрж╛рж░рзЗрж▓ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗ! ржЖржкржирж┐ {ref_bonus} ржЯрж╛ржХрж╛ ржкрзЗрзЯрзЗржЫрзЗржиред')

    bot.send_message(msg.chat.id, "ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж╛рж░ ржорзЗржирзБ ржерзЗржХрзЗ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред", reply_markup=main_menu(msg.chat.id))

@bot.message_handler(func=lambda msg: msg.text == "ЁЯОп ржЯрж╛рж╕рзНржХ ржХрж░рзБржи")
def task(msg):
    task_text = "ЁЯТ╕ ржкрзНрж░рждрж┐ ржЯрж╛рж╕рзНржХрзЗ рзйрзж ржЯрж╛ржХрж╛ ржкрзЗржорзЗржирзНржЯ ржжрзЗржУрзЯрж╛ рж╣рзЯред\n\n"
    task_text += "ЁЯУв ржирж┐ржЪрзЗрж░ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ рж╕ржорзНржкржирзНржи ржХрж░рзБржи:\n\n"
    for k, v in new_tasks.items():
        task_text += f"{k}. {v}\n\n"
    bot.send_message(msg.chat.id, task_text)

@bot.message_handler(func=lambda msg: msg.text == "ЁЯУ╖ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕рж╛ржмржорж┐ржЯ")
def request_screenshots(msg):
    user_id = str(msg.chat.id)
    screenshot_ref = db.reference(f'users/{user_id}/screenshots')
    existing = screenshot_ref.get() or []

    if len(existing) >= 3:
        bot.send_message(msg.chat.id, "тЬЕ ржЖржкржирж┐ ржЗрждрзЛржоржзрзНржпрзЗ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗржиред ржжрзЯрж╛ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
        return

    bot.send_message(msg.chat.id, "ЁЯЦ╝я╕П ржжрзЯрж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржПржХрж╕рж╛ржерзЗ ржкрж╛ржарж╛ржиред")

@bot.message_handler(content_types=['photo'])
def handle_photo(msg):
    user_id = str(msg.chat.id)
    screenshot_ref = db.reference(f'users/{user_id}/screenshots')
    existing = screenshot_ref.get() or []

    if len(existing) >= 3:
        bot.send_message(msg.chat.id, "тЬЕ ржЖржкржирж┐ ржЗрждрзЛржоржзрзНржпрзЗ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗржиред ржжрзЯрж╛ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
        return

    existing.append(msg.photo[-1].file_id)
    screenshot_ref.set(existing)

    bot.send_message(msg.chat.id, f"ЁЯУ╕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ {len(existing)} ржЬржорж╛ рж╣рзЯрзЗржЫрзЗред")

    if len(existing) == 3:
        media_group = [types.InputMediaPhoto(file_id) for file_id in existing]
        bot.send_media_group(ADMIN_ID, media_group)
        bot.send_message(ADMIN_ID, f"ЁЯСд ржЗржЙржЬрж╛рж░: {user_id}\n\nтЬЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи:", reply_markup=approve_reject_markup(user_id))
        bot.send_message(msg.chat.id, "тЬЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржПржкрзНрж░рзБржн рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржЬрж╛ржирж╛ржирзЛ рж╣ржмрзЗред")

def approve_reject_markup(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_ss:{user_id}"),
        types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_ss:{user_id}")
    )
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_ss") or call.data.startswith("reject_ss"))
def handle_ss_approval(call):
    action, user_id = call.data.split(":")
    user_ref = db.reference(f'users/{user_id}')
    user_data = user_ref.get() or {}
    balance = user_data.get('balance', 0)

    if action == "approve_ss":
        user_ref.child('balance').set(balance + 30)
        user_ref.child('screenshots').set([])
        bot.send_message(int(user_id), "ЁЯОЙ ржЖржкржирж╛рж░ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржПржкрзНрж░рзБржн рж╣рзЯрзЗржЫрзЗред рзйрзж ржЯрж╛ржХрж╛ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ ржпрзЛржЧ рж╣рзЯрзЗржЫрзЗред")
        bot.edit_message_text("тЬЕ Approve ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", call.message.chat.id, call.message.message_id)
    else:
        bot.send_message(int(user_id), "тЭМ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ ржкрзВрж░ржг рж╕ржарж┐ржХ рж╣рзЯржирж┐ред рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж░рж┐ржЬрзЗржХрзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        user_ref.child('screenshots').set([])
        bot.edit_message_text("тЭМ Reject ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", call.message.chat.id, call.message.message_id)

@bot.message_handler(func=lambda msg: msg.text == "ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
def balance(msg):
    user_id = str(msg.chat.id)
    data = db.reference(f'users/{user_id}').get() or {}
    bal = data.get('balance', 0)
    refs = data.get('referrals', 0)
    bot.send_message(msg.chat.id, f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {bal} ржЯрж╛ржХрж╛\nЁЯСе рж░рзЗржлрж╛рж░: {refs} ржЬржи")

@bot.message_handler(func=lambda msg: msg.text == "ЁЯСл рж░рзЗржлрж╛рж░ ржХрж░рзБржи")
def refer(msg):
    link = f"https://t.me/myoffer363bot?start={msg.chat.id}"
    bot.send_message(msg.chat.id, f"ЁЯУв ржПржЗ рж▓рж┐ржВржХрзЗ ржмржирзНржзрзБржжрзЗрж░ ржЗржиржнрж╛ржЗржЯ ржХрж░рзБржи:\n{link}\n\nЁЯТ░ ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗрж░ ржЬржирзНржп рззрзж ржЯрж╛ржХрж╛ рж░рж┐ржУрзЯрж╛рж░рзНржб ржкрж╛ржмрзЗржиред")

@bot.message_handler(func=lambda msg: msg.text == "ЁЯУд ржЙржЗржержбрзНрж░ ржХрж░рзБржи")
def withdraw(msg):
    user_id = str(msg.chat.id)
    data = db.reference(f'users/{user_id}').get() or {}
    balance = data.get("balance", 0)

    if balance < MIN_WITHDRAW_AMOUNT:
        bot.send_message(msg.chat.id, f"тЭМ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржпржерзЗрж╖рзНржЯ ржирзЯред ржХржоржкржХрзНрж╖рзЗ {MIN_WITHDRAW_AMOUNT} ржЯрж╛ржХрж╛ рж▓рж╛ржЧржмрзЗред",
                         reply_markup=main_menu(msg.chat.id))
        return

    bot.send_message(msg.chat.id, "ЁЯТ│ ржЖржкржирж╛рж░ bKash/Nagad/Rocket ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи ржпрж╛рж░ ржорж╛ржзрзНржпржорзЗ ржЯрж╛ржХрж╛ рждрзБрж▓рждрзЗ ржЪрж╛ржи:",
                     reply_markup=main_menu(msg.chat.id))
    bot.register_next_step_handler(msg, process_withdraw_number)

def process_withdraw_number(msg):
    number = msg.text.strip()
    user_id = str(msg.chat.id)
    withdraw_ref = db.reference(f'users/{user_id}/withdraw')

    withdraw_ref.push({
        'number': number,
        'status': 'pending'
    })

    bot.send_message(msg.chat.id, "тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржЕрзНржпрж╛ржбржорж┐ржи рж░рж┐ржнрж┐ржЙ ржХрж░ржмрзЗржиред")
    bot.send_message(ADMIN_ID, f"ЁЯУе ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ:\nЁЯСд ржЗржЙржЬрж╛рж░: {user_id}\nЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: {number}", reply_markup=withdraw_admin_markup(user_id, number))

def withdraw_admin_markup(user_id, number):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_withdraw:{user_id}:{number}"),
        types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_withdraw:{user_id}:{number}")
    )
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_withdraw") or call.data.startswith("reject_withdraw"))
def handle_withdraw_callback(call):
    action, user_id, number = call.data.split(":")
    user_ref = db.reference(f'users/{user_id}')
    user_data = user_ref.get() or {}
    balance = user_data.get('balance', 0)

    if action == "approve_withdraw":
        if balance >= MIN_WITHDRAW_AMOUNT:
            user_ref.child('balance').set(balance - MIN_WITHDRAW_AMOUNT)
            bot.send_message(int(user_id), f"тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣рзЯрзЗржЫрзЗред ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ: {number}")
            bot.edit_message_text("тЬЕ Approve ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "ржЗржЙржЬрж╛рж░рзЗрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржо ржЖржЫрзЗ!")
    else:
        bot.send_message(int(user_id), "тЭМ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        bot.edit_message_text("тЭМ Reject ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", call.message.chat.id, call.message.message_id)

@bot.message_handler(func=lambda msg: msg.text == "тД╣я╕П ржирж┐рзЯржорж╛ржмрж▓рзА")
def rules(msg):
    bot.send_message(msg.chat.id, (
        "ЁЯУМ ржПржЦрж╛ржирзЗ ржорзВрж▓ржд Email, Pin, Sign-Up ржПржЗ рж╕рж╛рж░рзНржнрзЗ ржЧрзБрж▓рзЛ ржкрзВрж░ржг ржХрж░рждрзЗ рж╣рзЯред\n"
        "тЬЕ ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛рж╕рзНржХрзЗ рзйржЯрж┐ ржХрж░рзЗ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐рждрзЗ рж╣ржмрзЗред\n"
        "ЁЯФН рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрзЗржЦрзЗ ржПржбржорж┐ржирж░рж╛ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ ржПржкрзНрж░рзБржн ржХрж░ржмрзЗред\n"
        "ЁЯЪл ржнрзБрж▓ ржмрж╛ ржлрзЗржХ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐рж▓рзЗ ржПржХрж╛ржЙржирзНржЯ ржмрзНржпрж╛ржи рж╣ржмрзЗред\n"
        "тЬЕ ржпрж╛рж░рж╛ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╕рж╛рж░рзНржнрзЗ ржкрзВрж░ржг ржУ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕рж╛ржмржорж┐ржЯ ржХрж░ржмрзЗ, рждрж╛рж░рж╛ржЗ рззрзжрзж% ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржХрзЛржирзЛ ржЭрж╛ржорзЗрж▓рж╛ ржЫрж╛рзЬрж╛ржЗред\n"
        "тП▒я╕П рззржЯрж┐ ржЯрж╛рж╕рзНржХ ржкрзВрж░ржг ржХрж░рж╛рж░ ржкрж░ ржорж┐ржирж┐ржорж╛ржо рззрзж ржорж┐ржирж┐ржЯ ржмрж┐рж░рждрж┐ ржжрж┐рзЯрзЗ ржкрж░ржмрж░рзНрждрзА ржЯрж╛рж╕рзНржХ ржкрзВрж░ржг ржХрж░рждрзЗ рж╣ржмрзЗред"
    ))

@bot.message_handler(func=lambda msg: msg.text == "ЁЯзСтАНЁЯТ╝ ржЕрзНржпрж╛ржбржорж┐ржи")
def admin(msg):
    if msg.chat.id != ADMIN_ID:
        bot.send_message(msg.chat.id, "тЭМ ржПржЗ ржлрж┐ржЪрж╛рж░ржЯрж┐ ржХрзЗржмрж▓ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
        return

    all_users = db.reference('users').get() or {}
    msg_text = f"ЁЯУК ржорзЛржЯ ржЗржЙржЬрж╛рж░: {len(all_users)} ржЬржи\n"
    bot.send_message(msg.chat.id, msg_text)

app = Flask(__name__)

@app.route('/')
def home():
    return "ЁЯдЦ Bot is alive and running."

def run_http():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# Flask рж╕рж╛рж░рзНржнрж╛рж░ ржЖрж▓рж╛ржжрж╛ ржерзНрж░рзЗржбрзЗ рж░рж╛ржи ржХрж░рзБржи
threading.Thread(target=run_http).start()

bot.infinity_polling()
