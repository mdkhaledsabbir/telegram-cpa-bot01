import os
import json
import telebot
from telebot import types
import firebase_admin
from firebase_admin import credentials, db

# ЁЯФР Secrets from environment (GitHub Actions)
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
FIREBASE_CRED = os.getenv("FIREBASE_CREDENTIALS")
FIREBASE_DB_URL = os.getenv("FIREBASE_DB_URL")

# ЁЯФР Firebase Init
if not firebase_admin._apps:
    cred = credentials.Certificate(json.loads(FIREBASE_CRED))
    firebase_admin.initialize_app(cred, {
        'databaseURL': FIREBASE_DB_URL
    })

ref = db.reference("/users")
bot = telebot.TeleBot(BOT_TOKEN)

# -------------------------------
# Get user data or create default
def get_user(user_id):
    user_ref = ref.child(str(user_id))
    user = user_ref.get()
    if not user:
        user = {
            "balance": 0,
            "referrals": 0,
            "submitted": False,
            "rejected_before": False  # To track if user was rejected before
        }
        user_ref.set(user)
    return user

def update_user(user_id, data):
    ref.child(str(user_id)).update(data)

# -------------------------------
# /start command
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    user = get_user(user_id)

    # Handle referral
    if len(message.text.split()) > 1:
        referrer = message.text.split()[1]
        if referrer != user_id:
            ref_user = get_user(referrer)
            ref_user['referrals'] += 1
            ref_user['balance'] += 10
            update_user(referrer, ref_user)
            bot.send_message(int(referrer), "тЬЕ ржЖржкржирж┐ ржПржХржЬржиржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рзЗржЫрзЗржи ржПржмржВ рззрзж ржЯрж╛ржХрж╛ ржкрзЗрзЯрзЗржЫрзЗржи!")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # рзпржЯрж┐ ржмрж╛ржЯржи ржПржЦрж╛ржирзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
    markup.add("ЁЯОп ржЯрж╛рж╕рзНржХ", "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕", "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐ржи")
    markup.add("ЁЯСе рж░рзЗржлрж╛рж░", "ЁЯУе ржЙржЗржержбрзНрж░", "ЁЯзСтАНЁЯТ╗ ржПржбржорж┐ржи")
    markup.add("ЁЯУЬ ржирж┐рзЯржорж╛ржмрж▓рзА", "ЁЯУЮ ржпрзЛржЧрж╛ржпрзЛржЧ", "тД╣я╕П рж╕рж╛рж╣рж╛ржпрзНржп")

    bot.send_message(message.chat.id, "тЬи рж╕рзНржмрж╛ржЧрждржо! ржПржХржЯрж┐ ржЕржкрж╢ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", reply_markup=markup)

# -------------------------------
# Task info
@bot.message_handler(func=lambda m: m.text == "ЁЯОп ржЯрж╛рж╕рзНржХ")
def show_tasks(message):
    bot.send_message(message.chat.id, "ЁЯз╛ ржирж┐ржЪрзЗ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ рж▓рж┐ржЩрзНржХ:\n\n"
                                     "1я╕ПтГг https://example.com\n"
                                     "2я╕ПтГг https://example2.com\n"
                                     "3я╕ПтГг https://example3.com\n"
                                     "4я╕ПтГг https://example4.com\n\n"
                                     "ЁЯУЭ ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛рж╕рзНржХрзЗ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржиред ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛рж╕рзНржХрзЗрж░ ржЬржирзНржп рзйрзж ржЯрж╛ржХрж╛ ржкрж╛ржмрзЗржиред")

# -------------------------------
# Balance
@bot.message_handler(func=lambda m: m.text == "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
def show_balance(message):
    user = get_user(message.from_user.id)
    bot.send_message(message.chat.id, f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {user['balance']} ржЯрж╛ржХрж╛\nЁЯСе рж░рзЗржлрж╛рж░ рж╕ржВржЦрзНржпрж╛: {user['referrals']}")

# -------------------------------
# Referral info
@bot.message_handler(func=lambda m: m.text == "ЁЯСе рж░рзЗржлрж╛рж░")
def refer_info(message):
    user_id = str(message.from_user.id)
    link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    refs = get_user(user_id)["referrals"]
    bot.send_message(message.chat.id, f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржЩрзНржХ:\n{link}\n\nЁЯСе ржорзЛржЯ рж░рзЗржлрж╛рж░: {refs}\nЁЯТ╡ ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░ = рззрзж ржЯрж╛ржХрж╛")

# -------------------------------
# Screenshot submission
@bot.message_handler(func=lambda m: m.text == "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐ржи")
def submit_screenshot(message):
    user_id = str(message.from_user.id)
    update_user(user_id, {"submitted": True})
    bot.send_message(message.chat.id, "ЁЯУ╕ ржжрзЯрж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи (рзйржЯрж┐)ред")

# -------------------------------
# Withdraw request
@bot.message_handler(func=lambda m: m.text == "ЁЯУе ржЙржЗржержбрзНрж░")
def withdraw_request(message):
    user = get_user(message.from_user.id)
    if user["balance"] >= 1000:
        bot.send_message(message.chat.id, "ЁЯТ│ ржЖржкржирж┐ ржХрзЛржи ржорж╛ржзрзНржпржорзЗ ржЯрж╛ржХрж╛ рждрзБрж▓рждрзЗ ржЪрж╛ржи?\nржЙржжрж╛рж╣рж░ржг: bKash / Nagad / Rocket рж╕рж╣ ржирж╛ржорзНржмрж╛рж░ ржкрж╛ржарж╛ржи:")
    else:
        bot.send_message(message.chat.id, "тЭМ ржорж┐ржирж┐ржорж╛ржо рззрзжрзжрзж ржЯрж╛ржХрж╛ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерж╛ржХрждрзЗ рж╣ржмрзЗ ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржпред")

# -------------------------------
# Rules button
@bot.message_handler(func=lambda m: m.text == "ЁЯУЬ ржирж┐рзЯржорж╛ржмрж▓рзА")
def rules(message):
    rules_text = ("ЁЯУЛ ржЯрж╛рж╕рзНржХ ржирж┐рзЯржорж╛ржмрж▓рзА:\n"
                  "1. ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛рж╕рзНржХрзЗрж░ ржЬржирзНржп рзйржЯрж┐ рж╕рзНржкрж╖рзНржЯ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржиред\n"
                  "2. рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЕржмрж╢рзНржпржЗ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкрзВрж░рзНржг ржХрж░рж╛рж░ ржкрзНрж░ржорж╛ржг рж╣рждрзЗ рж╣ржмрзЗред\n"
                  "3. ржнрзБрж▓рзЗ ржмрж╛ ржЕрж╕рждрзНржп рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐рж▓рзЗ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ ржмрж╛рждрж┐рж▓ рж╣рждрзЗ ржкрж╛рж░рзЗред\n"
                  "4. рж░рж┐ржЬрзЗржХрзНржЯ рж╣рж▓рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛рж░ рж╕рзБржпрзЛржЧ ржкрж╛ржмрзЗржиред\n"
                  "5. ржЕржирзНржпржжрзЗрж░ ржмрж┐рж░ржХрзНржд ржХрж░ржмрзЗржи ржирж╛ред")
    bot.send_message(message.chat.id, rules_text)

# -------------------------------
# Contact button
@bot.message_handler(func=lambda m: m.text == "ЁЯУЮ ржпрзЛржЧрж╛ржпрзЛржЧ")
def contact(message):
    contact_text = "ЁЯУЮ ржпрзЛржЧрж╛ржпрзЛржЧ:\n- Telegram: @adminusername\n- Email: admin@example.com\n- Phone: +880123456789"
    bot.send_message(message.chat.id, contact_text)

# -------------------------------
# Help button
@bot.message_handler(func=lambda m: m.text == "тД╣я╕П рж╕рж╛рж╣рж╛ржпрзНржп")
def help_info(message):
    help_text = ("тД╣я╕П рж╕рж╛рж╣рж╛ржпрзНржп:\n"
                 "ржЯрж╛рж╕рзНржХ рж╕ржорзНржкрж░рзНржХрзЗ, рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ ржПржмржВ ржЕржирзНржпрж╛ржирзНржп ржмрж┐рж╖ржпрж╝ рж╕ржорзНржкрж░рзНржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред")
    bot.send_message(message.chat.id, help_text)

# -------------------------------
# Admin panel
@bot.message_handler(func=lambda m: m.text == "ЁЯзСтАНЁЯТ╗ ржПржбржорж┐ржи")
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("ЁЯСБя╕П ржЗржЙржЬрж╛рж░ ржжрзЗржЦрзБржи", callback_data="view_user"))
    markup.add(types.InlineKeyboardButton("тЬПя╕П ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ", callback_data="edit_user"))
    bot.send_message(message.chat.id, "ЁЯЫая╕П ржПржбржорж┐ржи ржЕржкрж╢ржи:", reply_markup=markup)

# -------------------------------
# Callback handler for admin buttons & approve/reject
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data

    if data == "view_user":
        bot.send_message(call.message.chat.id, "ЁЯЖФ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржжрж┐ржи:")
        bot.register_next_step_handler(call.message, process_view_user)

    elif data == "edit_user":
        bot.send_message(call.message.chat.id, "тЬПя╕П ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржжрж┐ржи:")
        bot.register_next_step_handler(call.message, process_edit_user)

    elif data.startswith("approve_"):
        uid = data.split("_")[1]
        user = get_user(uid)
        user["balance"] += 30
        # Reset rejected flag on approval
        user["rejected_before"] = False
        update_user(uid, user)
        bot.send_message(int(uid), "тЬЕ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ ржПржкрзНрж░рзБржн рж╣рзЯрзЗржЫрзЗ! рзйрзж ржЯрж╛ржХрж╛ ржпрзЛржЧ рж╣рзЯрзЗржЫрзЗред")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    elif data.startswith("reject_"):
        uid = data.split("_")[1]
        user = get_user(uid)
        user["rejected_before"] = True
        update_user(uid, user)
        bot.send_message(int(uid), "тЭМ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ ржкрзВрж░ржг ржнрзБрж▓ рж╣рзЯрзЗржЫрзЗред ржирж┐рзЯржоржЧрзБрж▓рзЛ ржЕржирзБрж╕рж░ржг ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

# -------------------------------
# View User Info (admin)
def process_view_user(message):
    uid = message.text.strip()
    user = ref.child(uid).get()
    if user:
        bot.send_message(message.chat.id, f"ЁЯзС ржЗржЙржЬрж╛рж░ {uid}:\nЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {user['balance']} ржЯрж╛ржХрж╛\nЁЯСе рж░рзЗржлрж╛рж░: {user['referrals']}")
    else:
        bot.send_message(message.chat.id, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

# -------------------------------
# Edit User (admin)
def process_edit_user(message):
    uid = message.text.strip()
    if ref.child(uid).get():
        bot.send_message(message.chat.id, "ЁЯУе ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрж┐ржи:")
        bot.register_next_step_handler(message, lambda m: update_balance(m, uid))
    else:
        bot.send_message(message.chat.id, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

def update_balance(message, uid):
    try:
        new_balance = int(message.text.strip())
        update_user(uid, {"balance": new_balance})
        bot.send_message(message.chat.id, f"тЬЕ ржЗржЙржЬрж╛рж░ {uid} ржПрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржкржбрзЗржЯ рж╣рзЯрзЗржЫрзЗ: {new_balance} ржЯрж╛ржХрж╛")
    except:
        bot.send_message(message.chat.id, "тЭМ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")

# -------------------------------
# Handle incoming photos (screenshots)
@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    uid = str(message.from_user.id)
    user = get_user(uid)

    if user.get("submitted", False):
        caption = f"ЁЯЖФ ржЗржЙржЬрж╛рж░: {uid}\nтЬЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗ"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_{uid}"))
        markup.add(types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_{uid}"))
        bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption, reply_markup=markup)
        # Mark submitted false to wait for admin decision
        update_user(uid, {"submitted": False})
    else:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж┐ ржкрзНрж░ржержорзЗ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрзЗржУрзЯрж╛рж░ ржЬржирзНржп 'ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐ржи' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред")

# -------------------------------
bot.infinity_polling()
