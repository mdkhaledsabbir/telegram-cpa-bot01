# тЬЕ Import Statements
import os
import json
import threading

import telebot
from telebot import types

from flask import Flask

import firebase_admin
from firebase_admin import credentials
from firebase_admin import db

# ЁЯФР Load Environment Variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# ЁЯФе Firebase Setup
cred_data = json.loads(os.getenv("FIREBASE_CREDENTIALS"))
cred = credentials.Certificate(cred_data)
firebase_admin.initialize_app(cred, {
    'databaseURL': os.getenv("FIREBASE_DB_URL")
})

# ЁЯдЦ Bot Initialization
bot = telebot.TeleBot(BOT_TOKEN)

# ЁЯУМ Main Menu Buttons
def main_menu(user_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "ЁЯОп ржЯрж╛рж╕рзНржХ ржХрж░рзБржи",
        "ЁЯУ╖ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕рж╛ржмржорж┐ржЯ",
        "ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕",
        "ЁЯСл рж░рзЗржлрж╛рж░ ржХрж░рзБржи",
        "тД╣я╕П ржирж┐рзЯржорж╛ржмрж▓рзА",
        "ЁЯУд ржЙржЗржержбрзНрж░ ржХрж░рзБржи"
    ]
    # ржПржбржорж┐ржи рж╣рж▓рзЗ ржЕрзНржпрж╛ржбржорж┐ржи ржмрж╛ржЯржи ржжрзЗржЦрж╛ржмрзЗ
    if user_id and int(user_id) == ADMIN_ID:
        buttons.append("ЁЯзСтАНЁЯТ╝ ржЕрзНржпрж╛ржбржорж┐ржи")
    markup.add(*buttons)
    return markup

# ЁЯЯв /start Command with Referral System
@bot.message_handler(commands=['start'])
def start(msg):
    user_id = str(msg.chat.id)
    ref_id = str(msg.text.split()[1]) if len(msg.text.split()) > 1 else None
    user_ref = db.reference(f'users/{user_id}')

    if not user_ref.get():
        user_ref.set({
            'balance': 0,
            'referrals': 0,
            'screenshots': [],
            'submitted': False,
            'withdraw': [],
            'tasks_completed': 0
        })

        if ref_id and ref_id != user_id:
            ref_ref = db.reference(f'users/{ref_id}')
            if ref_ref.get():
                current_refs = ref_ref.child('referrals').get() or 0
                ref_ref.child('referrals').set(current_refs + 1)
                current_balance = ref_ref.child('balance').get() or 0
                ref_bonus = 10
                ref_ref.child('balance').set(current_balance + ref_bonus)
                bot.send_message(int(ref_id), f'ЁЯОЙ ржПржХржЬржи ржирждрзБржи рж░рзЗржлрж╛рж░рзЗрж▓ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗ! ржЖржкржирж┐ {ref_bonus} ржЯрж╛ржХрж╛ ржкрзЗрзЯрзЗржЫрзЗржиред')

    bot.send_message(msg.chat.id, "ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж╛рж░ ржорзЗржирзБ ржерзЗржХрзЗ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред", reply_markup=main_menu(user_id))


# ЁЯОп Show Tasks with Rules and 20 Tasks
@bot.message_handler(func=lambda msg: msg.text == "ЁЯОп ржЯрж╛рж╕рзНржХ ржХрж░рзБржи")
def task(msg):
    task_text = (
        "ЁЯУв ржирж┐ржЪрзЗрж░ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ рж╕ржорзНржкржирзНржи ржХрж░рзБржи:\n\n"
        "тШЕ ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛рж╕рзНржХрзЗ рзйржЯрж┐ ржХрж░рзЗ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐рждрзЗ рж╣ржмрзЗред\n"
        "тШЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрзЗржЦрзЗ ржПржбржорж┐ржирж░рж╛ ржЯрж╛рж╕рзНржХ ржПржкрзНрж░рзБржн ржХрж░ржмрзЗржиред\n"
        "тШЕ ржнрзБрж▓ ржмрж╛ ржлрзЗржХ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐рж▓рзЗ ржПржХрж╛ржЙржирзНржЯ ржмрзНржпрж╛ржи рж╣ржмрзЗред\n"
        "тШЕ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐рж▓рзЗ рззрзжрзж% ржЙржЗржержбрзНрж░ ржкрж╛ржмрзЗржиред\n"
        "тШЕ рззржЯрж┐ ржЯрж╛рж╕рзНржХ рж╢рзЗрж╖рзЗ ржХржоржкржХрзНрж╖рзЗ рззрзж ржорж┐ржирж┐ржЯ ржмрж┐рж░рждрж┐ ржжрж┐рждрзЗ рж╣ржмрзЗ ржкрж░ржмрж░рзНрждрзА ржЯрж╛рж╕рзНржХ ржХрж░рж╛рж░ ржЖржЧрзЗред\n\n"
        "ржЯрж╛рж╕рзНржХ рж▓рж┐рж╕рзНржЯ:\n"
    )

    tasks = {
        "1": "Pin submit - https://tinyurl.com/37xxp2an",
        "2": "Pin submit - https://tinyurl.com/4vc76fw5",
        "3": "Sign-up - https://tinyurl.com/yyherfxt",
        "4": "Sign-up - https://tinyurl.com/25nt96v9",
        "5": "Any - https://trianglerockers.com/1830624",
        "6": "Any - https://trianglerockers.com/1830624",
        "7": "Any - https://trianglerockers.com/1830624",
        "8": "Any - https://trianglerockers.com/1830624",
        "9": "Pin or sign-up - https://short-link.me/19jeX",
        "10": "Pin or sign-up - https://short-link.me/19jfx",
        "11": "Pin or sign-up - https://short-link.me/19jfZ",
        "12": "Pin or sign-up - https://short-link.me/19jfx",
        "13": "Pin or sign-up - https://short-link.me/19jgz",
        "14": "Pin or sign-up - https://short-link.me/19jeX",
        "15": "Pin or sign-up - https://short-link.me/19jfx",
        "16": "Pin or sign-up - https://short-link.me/19jeX",
        "17": "Pin or sign-up - https://short-link.me/19jfx",
        "18": "Pin or sign-up - https://short-link.me/19jgz",
        "19": "Pin or sign-up - https://short-link.me/19jfx",
        "20": "Pin or sign-up - https://short-link.me/19jeX"
    }

    for k, v in tasks.items():
        task_text += f"{k}. {v}\n\n"

    bot.send_message(msg.chat.id, task_text)


# ЁЯУ╖ Screenshot Submission (same as before)
@bot.message_handler(content_types=['photo'])
def handle_photo(msg):
    user_id = str(msg.chat.id)
    screenshot_ref = db.reference(f'users/{user_id}/screenshots')
    existing = screenshot_ref.get() or []

    if len(existing) >= 3:
        bot.send_message(msg.chat.id, "тЬЕ ржЖржкржирж┐ ржЗрждрзЛржоржзрзНржпрзЗ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗржиред ржжрзЯрж╛ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
        return

    existing.append(msg.photo[-1].file_id)
    screenshot_ref.set(existing)

    bot.send_message(msg.chat.id, f"ЁЯУ╕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ {len(existing)} ржЬржорж╛ рж╣рзЯрзЗржЫрзЗред")
    bot.forward_message(ADMIN_ID, msg.chat.id, msg.message_id)

    if len(existing) == 3:
        bot.send_message(msg.chat.id, "тЬЕ ржЖржкржирж┐ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗржиред ржжрзЯрж╛ ржХрж░рзЗ ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")


# ЁЯТ░ Balance & Referral Count
@bot.message_handler(func=lambda msg: msg.text == "ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
def balance(msg):
    user_id = str(msg.chat.id)
    data = db.reference(f'users/{user_id}').get() or {}
    bal = data.get('balance', 0)
    refs = data.get('referrals', 0)
    bot.send_message(msg.chat.id, f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {bal} ржЯрж╛ржХрж╛\nЁЯСе рж░рзЗржлрж╛рж░: {refs} ржЬржи")


# ЁЯСм Referral Link
@bot.message_handler(func=lambda msg: msg.text == "ЁЯСл рж░рзЗржлрж╛рж░ ржХрж░рзБржи")
def refer(msg):
    link = f"https://t.me/myoffer363bot?start={msg.chat.id}"
    bot.send_message(msg.chat.id, f"ЁЯУв ржПржЗ рж▓рж┐ржВржХрзЗ ржмржирзНржзрзБржжрзЗрж░ ржЗржиржнрж╛ржЗржЯ ржХрж░рзБржи:\n{link}")


# ЁЯзСтАНЁЯТ╝ Admin Panel (Only visible to ADMIN_ID)
@bot.message_handler(func=lambda msg: msg.text == "ЁЯзСтАНЁЯТ╝ ржЕрзНржпрж╛ржбржорж┐ржи" and msg.chat.id == ADMIN_ID)
def admin(msg):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ЁЯУЭ ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ", "ЁЯУЛ ржорзЛржЯ ржЗржЙржЬрж╛рж░", "ЁЯФЩ ржорзЗржЗржи ржорзЗржирзБ")
    bot.send_message(msg.chat.id, "ЁЯзСтАНЁЯТ╝ ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓:", reply_markup=markup)


# ЁЯУЭ ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@bot.message_handler(func=lambda msg: msg.text == "ЁЯУЭ ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ" and msg.chat.id == ADMIN_ID)
def user_edit_start(msg):
    bot.send_message(msg.chat.id, "ЁЯУМ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржжрж┐ржи ржпрж╛ржХрзЗ ржПржбрж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржи:")
    bot.register_next_step_handler(msg, user_edit_get_user)


def user_edit_get_user(msg):
    user_id = msg.text.strip()
    user_ref = db.reference(f'users/{user_id}')
    if not user_ref.get():
        bot.send_message(msg.chat.id, "тЭМ ржЗржЙржЬрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
    data = user_ref.get()
    info_text = (
        f"ЁЯзСтАНЁЯТ╗ ржЗржЙржЬрж╛рж░: {user_id}\n"
        f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {data.get('balance',0)}\n"
        f"ЁЯСе рж░рзЗржлрж╛рж░: {data.get('referrals',0)}\n"
        f"ЁЯОп ржЯрж╛рж╕рзНржХ рж╕ржВржЦрзНржпрж╛: {data.get('tasks_completed',0)}\n\n"
        f"ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрж┐ржи:"
    )
    bot.send_message(msg.chat.id, info_text)
    bot.register_next_step_handler(msg, user_edit_update_balance, user_id)


def user_edit_update_balance(msg, user_id):
    try:
        new_balance = int(msg.text.strip())
    except ValueError:
        bot.send_message(msg.chat.id, "тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return
    user_ref = db.reference(f'users/{user_id}')
    user_ref.update({'balance': new_balance})
    bot.send_message(msg.chat.id, f"тЬЕ ржЗржЙржЬрж╛рж░ {user_id} ржПрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣рзЯрзЗржЫрзЗ: {new_balance} ржЯрж╛ржХрж╛ред")


# ЁЯУЛ ржорзЛржЯ ржЗржЙржЬрж╛рж░ рж▓рж┐рж╕рзНржЯ ржжрзЗржЦрж╛ржирзЛ
@bot.message_handler(func=lambda msg: msg.text == "ЁЯУЛ ржорзЛржЯ ржЗржЙржЬрж╛рж░" and msg.chat.id == ADMIN_ID)
def show_all_users(msg):
    all_users = db.reference('users').get() or {}
    if not all_users:
        bot.send_message(msg.chat.id, "тЭМ ржХрзЛржирзЛ ржЗржЙржЬрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
        return

    lines = []
    for uid, info in all_users.items():
        bal = info.get('balance', 0)
        refs = info.get('referrals', 0)
        tasks = info.get('tasks_completed', 0)
        lines.append(f"ЁЯСд {uid} | ЁЯТ░ {bal} ржЯрж╛ржХрж╛ | ЁЯСе {refs} рж░рзЗржлрж╛рж░ | ЁЯОп {tasks} ржЯрж╛рж╕рзНржХ")

    chunk_size = 20  # ржкрзНрж░рждрж┐ ржорзЗрж╕рзЗржЬрзЗ рзирзж ржЗржЙржЬрж╛рж░ ржжрзЗржЦрж╛ржмрзЛ
    for i in range(0, len(lines), chunk_size):
        bot.send_message(msg.chat.id, "\n".join(lines[i:i+chunk_size]))


# ЁЯТ╕ Withdraw System
@bot.message_handler(func=lambda msg: msg.text == "ЁЯУд ржЙржЗржержбрзНрж░ ржХрж░рзБржи")
def withdraw(msg):
    user_id = str(msg.chat.id)
    data = db.reference(f'users/{user_id}').get() or {}
    balance = data.get("balance", 0)

    if balance < 600:
        bot.send_message(msg.chat.id, "тЭМ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржХржоржкржХрзНрж╖рзЗ рзмрзжрзж ржЯрж╛ржХрж╛ ржерж╛ржХрждрзЗ рж╣ржмрзЗред")
        return

    bot.send_message(msg.chat.id, "ЁЯТ│ ржирж╛ржо ржжрж┐ржи:")
    bot.register_next_step_handler(msg, process_withdraw_name)


def process_withdraw_name(msg):
    name = msg.text.strip()
    bot.send_message(msg.chat.id, "ЁЯУЮ ржорзЛржмрж╛ржЗрж▓ ржиржорзНржмрж░ ржжрж┐ржи:")
    bot.register_next_step_handler(msg, process_withdraw_mobile, name)


def process_withdraw_mobile(msg, name):
    mobile = msg.text.strip()
    bot.send_message(msg.chat.id, "ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржорзЗржержб ржжрж┐ржи (bKash, Nagad, Rocket):")
    bot.register_next_step_handler(msg, process_withdraw_method, name, mobile)


def process_withdraw_method(msg, name, mobile):
    method = msg.text.strip()
    if method not in ["bKash", "Nagad", "Rocket"]:
        bot.send_message(msg.chat.id, "тЭМ рж╢рзБржзрзБржорж╛рждрзНрж░ bKash, Nagad, ржЕржержмрж╛ Rocket ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        bot.register_next_step_handler(msg, process_withdraw_method, name, mobile)
        return
    bot.send_message(msg.chat.id, "ЁЯТ░ ржЙржЗржержбрзНрж░ ржПржорж╛ржЙржирзНржЯ ржжрж┐ржи:")
    bot.register_next_step_handler(msg, process_withdraw_amount, name, mobile, method)


def process_withdraw_amount(msg, name, mobile, method):
    try:
        amount = int(msg.text.strip())
    except ValueError:
        bot.send_message(msg.chat.id, "тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        bot.register_next_step_handler(msg, process_withdraw_amount, name, mobile, method)
        return

    user_id = str(msg.chat.id)
    data = db.reference(f'users/{user_id}').get() or {}
    balance = data.get("balance", 0)

    if amount < 600:
        bot.send_message(msg.chat.id, "тЭМ ржЙржЗржержбрзНрж░рзЗрж░ ржЬржирзНржп ржирзНржпрзВржирждржо ржкрж░рж┐ржорж╛ржг рзмрзжрзж ржЯрж╛ржХрж╛ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        bot.register_next_step_handler(msg, process_withdraw_amount, name, mobile, method)
        return
    if amount > balance:
        bot.send_message(msg.chat.id, "тЭМ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЙржЗржержбрзНрж░рзЗрж░ ржЬржирзНржп ржпржерзЗрж╖рзНржЯ ржирзЯред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        bot.register_next_step_handler(msg, process_withdraw_amount, name, mobile, method)
        return

    withdraw_ref = db.reference(f'withdraw_requests')
    withdraw_ref.push({
        'user_id': user_id,
        'name': name,
        'mobile': mobile,
        'method': method,
        'amount': amount,
        'status': 'pending'
    })

    bot.send_message(msg.chat.id, "тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржЕрзНржпрж╛ржбржорж┐ржи рж░рж┐ржнрж┐ржЙ ржХрж░ржмрзЗржиред")
    bot.send_message(ADMIN_ID,
                     f"ЁЯУе ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ:\nЁЯСд ржЗржЙржЬрж╛рж░: {user_id}\nЁЯСд ржирж╛ржо: {name}\nЁЯУ▒ ржорзЛржмрж╛ржЗрж▓: {mobile}\nЁЯТ│ ржорзЗржержб: {method}\nЁЯТ░ ржПржорж╛ржЙржирзНржЯ: {amount}",
                     reply_markup=withdraw_admin_markup(user_id))


# ЁЯзСтАНтЪЦя╕П Withdraw Admin Approval Buttons
def withdraw_admin_markup(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_withdraw:{user_id}"),
        types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_withdraw:{user_id}")
    )
    return markup


# тЪЩя╕П Withdraw Callback Handler
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_withdraw") or call.data.startswith("reject_withdraw"))
def handle_withdraw_callback(call):
    action, user_id = call.data.split(":")
    user_ref = db.reference(f'users/{user_id}')
    withdraw_requests = db.reference('withdraw_requests').order_by_child('user_id').equal_to(user_id).get()

    if action == "approve_withdraw":
        # ржкрзНрж░ржержо ржкрзЗржирзНржбрж┐ржВ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржмрзЗ
        for key, req in withdraw_requests.items():
            if req.get('status') == 'pending':
                amount = req.get('amount', 0)
                user_data = user_ref.get()
                balance = user_data.get('balance', 0)
                if balance >= amount:
                    user_ref.child('balance').set(balance - amount)
                    db.reference(f'withdraw_requests/{key}').update({'status': 'approved'})
                    bot.send_message(int(user_id), f"тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЕржирзБржорзЛржжрж┐ржд рж╣рзЯрзЗржЫрзЗред {amount} ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
                    bot.edit_message_text("тЬЕ Approve ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", call.message.chat.id, call.message.message_id)
                else:
                    bot.edit_message_text("тЭМ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЕржкрж░рзНржпрж╛ржкрзНрждред", call.message.chat.id, call.message.message_id)
                return
        bot.edit_message_text("тЭМ ржХрзЛржирзЛ ржкрзЗржирзНржбрж┐ржВ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред", call.message.chat.id, call.message.message_id)

    else:
        for key, req in withdraw_requests.items():
            if req.get('status') == 'pending':
                db.reference(f'withdraw_requests/{key}').update({'status': 'rejected'})
                bot.send_message(int(user_id), "тЭМ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
                bot.edit_message_text("тЭМ Reject ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", call.message.chat.id, call.message.message_id)
                return
        bot.edit_message_text("тЭМ ржХрзЛржирзЛ ржкрзЗржирзНржбрж┐ржВ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред", call.message.chat.id, call.message.message_id)


# тД╣я╕П Rules Handler
@bot.message_handler(func=lambda msg: msg.text == "тД╣я╕П ржирж┐рзЯржорж╛ржмрж▓рзА")
def rules(msg):
    rules_text = (
        "ЁЯУМ ржирж┐рзЯржорж╛ржмрж▓рзА:\n\n"
        "рзз. рж╕ржм ржЯрж╛рж╕рзНржХ рж╕рждрзНржпржнрж╛ржмрзЗ ржХрж░рждрзЗ рж╣ржмрзЗред\n"
        "рзи. ржнрзБрж▓ ржмрж╛ ржлрзЗржХ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐рж▓рзЗ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржмрзНрж▓ржХ рж╣ржмрзЗред\n"
        "рзй. ржХржоржкржХрзНрж╖рзЗ рззрзж ржорж┐ржирж┐ржЯ ржмрж┐рж░рждрж┐ ржжрж┐рзЯрзЗ ржкрж░ржмрж░рзНрждрзА ржЯрж╛рж╕рзНржХ ржХрж░рждрзЗ рж╣ржмрзЗред"
    )
    bot.send_message(msg.chat.id, rules_text)


# ЁЯМР Dummy HTTP Server for Railway/Render
app = Flask(__name__)

@app.route('/')
def home():
    return "ЁЯдЦ Bot is alive and running."


# ЁЯМН Run HTTP Server
def run_http():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)


# ЁЯФБ Start Server and Bot
threading.Thread(target=run_http).start()
print("тЬЕ Bot is running...")
bot.infinity_polling()
