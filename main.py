import os
import json
import telebot
from telebot import types
import firebase_admin
from firebase_admin import credentials, db

# ЁЯФР Load Secrets
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
firebase_creds_str = os.getenv("FIREBASE_CREDENTIALS")
firebase_creds = json.loads(firebase_creds_str)

# тЬЕ Initialize Firebase
cred = credentials.Certificate(firebase_creds)
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://cpabot-a1604-default-rtdb.firebaseio.com/'
})
ref = db.reference('users')

bot = telebot.TeleBot(BOT_TOKEN)

# тЬЕ CPA Tasks
TASKS = {
    "Task 1": "ЁЯУМ Pin Submit: https://tinyurl.com/37xxp2an\nЁЯЦ╝ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи",
    "Task 2": "ЁЯУМ Pin Submit: https://tinyurl.com/4vc76fw5\nЁЯЦ╝ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи",
    "Task 3": "ЁЯУз Email Submit: https://tinyurl.com/yyherfxt\nЁЯЦ╝ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи",
    "Task 4": "ЁЯУз Email Submit: https://tinyurl.com/25nt96v9\nЁЯЦ╝ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи"
}

# тЬЕ Start Command
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    data = ref.get() or {}
    if user_id not in data:
        data[user_id] = {'referrals': 0, 'balance': 0, 'submitted': False}
        ref_code = message.text.split(' ')[1] if len(message.text.split()) > 1 else None
        if ref_code and ref_code in data and ref_code != user_id:
            data[ref_code]['referrals'] += 1
            data[ref_code]['balance'] += 10
            bot.send_message(int(ref_code), f"ЁЯОЙ ржЖржкржирж┐ рззржЯрж┐ рж░рзЗржлрж╛рж░рзЗрж▓ ржкрзЗрзЯрзЗржЫрзЗржи!\nЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржПржЦржи: рз│{data[ref_code]['balance']}")
    ref.set(data)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ЁЯУЭ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ", "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛", "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕", "ЁЯУи ржЙржЗржержбрзНрж░", "ЁЯСе рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ")
    bot.send_message(message.chat.id, "рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ЁЯСЗ", reply_markup=markup)

# тЬЕ Task List
@bot.message_handler(func=lambda m: m.text == "ЁЯУЭ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ")
def task_list(message):
    msg = "ЁЯФ╣ ржмрж░рзНрждржорж╛ржи ржЯрж╛рж╕рзНржХрж╕ржорзВрж╣:\n\n"
    for title, link in TASKS.items():
        msg += f"тЬЕ {title}\n{link}\n\n"
    bot.send_message(message.chat.id, msg)

# тЬЕ Screenshot prompt
@bot.message_handler(func=lambda m: m.text == "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛")
def ask_screenshot(message):
    bot.send_message(message.chat.id, "ЁЯФД ржжрзЯрж╛ ржХрж░рзЗ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржПржХ ржПржХ ржХрж░рзЗ ржкрж╛ржарж╛ржиред")

# тЬЕ Screenshot handling
@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = str(message.chat.id)
    caption = f"ЁЯЖФ ржЗржЙржЬрж╛рж░ ID: {user_id}\nЁЯСд ржЗржЙржЬрж╛рж░ржирзЗржо: @{message.chat.username or 'N/A'}"
    bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    bot.send_message(ADMIN_ID, caption)
    bot.send_message(message.chat.id, "тЬЕ ржЖржкржирж╛рж░ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржЪрзЗржХ ржХрж░рзЗ ржПржкрзНрж░рзБржн ржХрж░рж╛ рж╣ржмрзЗред")

# тЬЕ Balance check
@bot.message_handler(func=lambda m: m.text == "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
def check_balance(message):
    user_id = str(message.chat.id)
    data = ref.get() or {}
    user = data.get(user_id, {})
    balance = user.get('balance', 0)
    referrals = user.get('referrals', 0)
    bot.send_message(message.chat.id, f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{balance} ржЯрж╛ржХрж╛\nЁЯСе рж░рзЗржлрж╛рж░: {referrals} ржЬржи")

# тЬЕ Withdraw
@bot.message_handler(func=lambda m: m.text == "ЁЯУи ржЙржЗржержбрзНрж░")
def withdraw(message):
    user_id = str(message.chat.id)
    data = ref.get() or {}
    if user_id not in data:
        return bot.send_message(message.chat.id, "тЭМ рждржерзНржп ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

    balance = data[user_id]['balance']
    if balance >= 1000:
        bot.send_message(message.chat.id, "тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред\nЁЯУЕ ржкрзЗржорзЗржирзНржЯ рзйрзз рждрж╛рж░рж┐ржЦрзЗ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗред")
        bot.send_message(ADMIN_ID, f"ЁЯУи @{message.chat.username or user_id} ржЙржЗржержбрзНрж░ ржЪрзЗрзЯрзЗржЫрзЗред ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{balance}")
    else:
        bot.send_message(message.chat.id, "тЭМ ржЙржЗржержбрзНрж░ ржПрж░ ржЬржирзНржп ржЕржирзНрждржд рззрзжрзжрзж ржЯрж╛ржХрж╛ ржерж╛ржХрждрзЗ рж╣ржмрзЗред")

# тЬЕ Referral link
@bot.message_handler(func=lambda m: m.text == "ЁЯСе рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ")
def referral_link(message):
    bot.send_message(message.chat.id, f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:\nhttps://t.me/{bot.get_me().username}?start={message.chat.id}\n\nЁЯСе ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ рззрзж ржЯрж╛ржХрж╛!")

# тЬЕ Admin: Check user balance
@bot.message_handler(commands=['balance'])
def admin_check_balance(message):
    if message.chat.id != ADMIN_ID:
        return
    try:
        target = message.text.split()[1]
        data = ref.get() or {}
        if target in data:
            bal = data[target]['balance']
            ref_count = data[target]['referrals']
            bot.send_message(message.chat.id, f"ЁЯУК ржЗржЙржЬрж╛рж░ {target}:\nЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{bal}\nЁЯСе рж░рзЗржлрж╛рж░: {ref_count}")
        else:
            bot.send_message(message.chat.id, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    except:
        bot.send_message(message.chat.id, "тЪая╕П ржХржорж╛ржирзНржб ржнрзБрж▓!\nржмрзНржпржмрж╣рж╛рж░: /balance <user_id>")

# тЬЕ Run the bot
bot.infinity_polling()
